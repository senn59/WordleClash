@page
@using WordleClash.Core
@using WordleClash.Core.Enums
@model WordleClash.Web.Pages.SingleplayerModel

@{
    ViewData["Title"] = "Singleplayer";
}

<div class="wrapper">
    @{
        if (Model.GameModel.Status is GameStatus.Won or GameStatus.Lost)
        {
            <div class="game-end-overlay">
                <div class="game-end-overlay-wrapper">
                    <form method="post" id="restartForm">
                        @if (Model.GameModel.Status == GameStatus.Won)
                        {
                            <div class="icon">&#127942;</div>
                            <h1>YOU WIN!</h1>
                        }
                        else
                        {
                            <h1>YOU LOSE!</h1>
                        }
                        <div class="buttons">
                            <button class="custom-btn custom-btn-primary" type="submit">New Game</button>
                            <button class="custom-btn custom-btn-secondary" onclick="CloseOverlay()">Close</button>
                        </div>
                        <input type="hidden" name="NewGame" value="true"/>
                    </form>
                </div>
            </div>
        }
    }
    <div class="wordle-wrapper">
        <div class="wordle">
            @for (var i = 0; i < Model.GameModel.MaxTries; i++)
            {
                <div class="wordle-row">
                    @if (i < Model.GameModel.MoveHistory.Count && Model.GameModel.MoveHistory.Count > 0)
                    {
                        @foreach (var lr in Model.GameModel.MoveHistory[i].WordAnalysis)
                        {
                            <div class="wordle-tile @lr.Feedback">@lr.Letter</div>
                        }
                    }
                    else
                    {
                        @for (var j = 0; j < 5; j++)
                        {
                            <div class="wordle-tile"></div>
                        }
                    }
                </div>
            }
        </div>
        <div class="letters">
            @{
                var alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".ToCharArray();
                foreach (var letter in alphabet)
                {
                    <span class="@GetClassName(letter)">@letter</span>
                }
            }
        </div>
    </div>

</div>
<form method="post" id="guessForm">
    <input type="hidden" name="Guess" id="guessInput">
</form>

@functions
{
    List<LetterResult> GetUsedLetters()
    {
        List<LetterResult> usedLetters = [];
        foreach (var guessResult in Model.GameModel.MoveHistory)
        {
            usedLetters.AddRange(guessResult.WordAnalysis);
        }
        return usedLetters;
    }

    string GetClassName(char letter)
    {
        var className = "Unused";
        var occurences = GetUsedLetters()
            .Where(l => l.Letter == letter)
            .Select(l => l.Feedback)
            .ToList();
        if (occurences.Count == 1)
        {
            className = occurences[0].ToString();
        }
        else if (occurences.Count > 1)
        {
            className = 
                occurences.Contains(LetterFeedback.CorrectPosition)
                ? LetterFeedback.CorrectPosition.ToString()
                : occurences[0].ToString();
        }
        return className;
    }
}

@section Scripts {
<script src="~/js/WriteInTiles.js"></script>
<script>
    const CloseOverlay = () => {
        document.querySelector(".game-end-overlay").remove();
    }
</script>
}
